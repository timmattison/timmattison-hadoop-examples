package com.timmattison.hadoop.examples.writables.wordcooccurrence;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;

public class TextPairWritable implements WritableComparable<TextPairWritable> {
	private Text left;
	private Text right;

	public TextPairWritable() {
		// Required for serialization
	}

	public TextPairWritable(String left, String right) {
		this.left = new Text(left);
		this.right = new Text(right);
	}

	@Override
	public void write(DataOutput out) throws IOException {
		// Write the fields to the DataOutput object
		left.write(out);
		right.write(out);
	}

	@Override
	public void readFields(DataInput in) throws IOException {
		// Allocate new Text values for the fields
		left = new Text();
		right = new Text();

		// Read the fields in from the DataInput object
		left.readFields(in);
		right.readFields(in);
	}

	// Below are the equals and hashCode methods generated by Eclipse

	/**
	 * Automatically generated hashCode
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((left == null) ? 0 : left.hashCode());
		result = prime * result + ((right == null) ? 0 : right.hashCode());
		return result;
	}

	/**
	 * Automatically generated equals
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TextPairWritable other = (TextPairWritable) obj;
		if (left == null) {
			if (other.left != null)
				return false;
		} else if (!left.equals(other.left))
			return false;
		if (right == null) {
			if (other.right != null)
				return false;
		} else if (!right.equals(other.right))
			return false;
		return true;
	}

	@Override
	public int compareTo(TextPairWritable o) {
		String firstString = this.toString();
		String secondString = o.toString();

		return firstString.compareTo(secondString);
	}

	@Override
	public String toString() {
		return left.toString() + "," + right.toString();
	}

	public Text toText() {
		return new Text(toString());
	}
}